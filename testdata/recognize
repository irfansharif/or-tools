recognize
constrain.all-same(a, b, c)
constrain.all-different(a, b, c to f)
constrain.boolean-or(a, b, c to f)
constrain.boolean-xor(a, b, c to f)
constrain.boolean-and(a, b, c to f) if d, e
constrain.at-most-k(a, b, c to f | 2)
constrain.at-least-k(a, b, c to f | 2)
constrain.exactly-k(a, b, c to f | 2)
constrain.assignments([a, b to c] ∈ [1, 2, 3] ∪ [4, 5, 7])
constrain.assignments([x to z] ∈ [false, false, true] ∪ [true, false, false])
constrain.cumulative(i: 12, j: 13| 32)
constrain.binary-op(a / b == c)
constrain.binary-op(a % b == c)
constrain.binary-op(a * b == c)
constrain.element(t == [a, b, c][i])
constrain.implication(a → b)
constrain.linear-exprs(2x + y + z + 6 in [3, 5] ∪ [8, 24])
constrain.equality(2x + y + z + 6 == max(2f + j, n - y))
constrain.equality(x == max(Σ(a to y)))
constrain.equality(x == min(a to c))
constrain.non-overlapping(i, j)
constrain.non-overlapping-2D([i, j], [j,k], true)
----

recognize
model.name(ex)
model.literals(x, y, z)
model.vars(x, y to z in [0, 10])
model.constants(c, d == 42)
model.maximize(y)
model.maximize(y + 12)
model.minimize(Σ(a to c))
model.intervals(i as [s,e|sz], j as [e,s|sz]) if a
model.solve()
model.solve-all()
model.print()
model.validate()
----

recognize
result.booleans(x to z)
result.values(x to z)
result.feasible()
result.infeasible()
result.invalid()
result.optimal()
result.objective-value()
----
